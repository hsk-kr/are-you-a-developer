{"version":3,"sources":["contexts/ThemeContext.ts","contexts/LanguageContext.ts","contexts/providers/LanguageProvider.tsx","components/Main/index.tsx","components/Setting/index.tsx","contexts/QuestionsContext.ts","components/Game/index.tsx","components/GameResult/index.tsx","contexts/providers/QuestionsProvider.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["theme","white","menuLabelBackgroundColor","menuLabelColor","menuLabelActiveColor","resultTextColor","defaultThemeContext","themeName","setTheme","value","key","document","documentElement","style","setProperty","setCSSVariables","ThemeContext","createContext","languages","ko","title","menuStart","menuHistory","menuSetting","backButton","changeLanguage","notSupported","resultTitle","numberOfTotalQuestions","numberOfCorrectAnswers","numberOfIncorrectAnswers","perfectScoreTitle","goodSCoreTitle","badScoreTitle","redirectToMain","en","defaultLanguageContext","lang","setLang","LanguageContext","LanguageProvider","children","useState","langCtx","setLangCtx","Provider","Main","themeContext","useContext","useEffect","className","to","onClick","alert","Setting","console","log","questions","question","answerList","answerIdx","defaultQuestionsContext","currentQuestionIdx","changeIdxRandomly","QuestionsContext","Game","progressWidthPercentage","setProgressWidthPercentage","isGameEnd","gameEnd","correctAnswerNum","setCorrectAnswerNum","totalQuestionNum","setTotalQuestionNum","questionObj","setQuestionObj","randNumList","setRandNumList","srtN","endN","numSequence","Array","from","_","i","length","rIdx","Math","floor","random","push","splice","generateRandNumList","setTimeout","src","process","alt","width","map","awNum","GameResult","URLSearchParams","useLocation","search","query","totalNum","setTotalNum","correctNum","setCorrectNum","resultText","setResultText","loading","load","hasError","error","total","Number","get","cn","isNaN","QuestionsProvider","questionsCtx","setQuestionsCtx","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8f6313ba.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nconst setCSSVariables = (themeName: keyof Themes) => {\r\n  for (const value in theme[themeName]) {\r\n    const key: keyof Theme = value as keyof Theme;\r\n    document.documentElement.style.setProperty(\r\n      `--${key}`,\r\n      theme[themeName][key]\r\n    );\r\n  }\r\n};\r\n\r\nexport type Theme = {\r\n  menuLabelBackgroundColor: string;\r\n  menuLabelColor: string;\r\n  menuLabelActiveColor: string;\r\n  resultTextColor: string;\r\n};\r\n\r\nexport type Themes = {\r\n  white: Theme;\r\n};\r\n\r\nexport type ThemeContextType = {\r\n  themeName: keyof Themes;\r\n  setTheme: (themeName: keyof Themes) => void;\r\n};\r\n\r\nexport const theme: Themes = {\r\n  white: {\r\n    menuLabelBackgroundColor: \"#ecf0f1\",\r\n    menuLabelColor: \"#ffffff\",\r\n    menuLabelActiveColor: \"#a4b0be\",\r\n    resultTextColor: \"#636e72\"\r\n  }\r\n};\r\n\r\nexport const defaultThemeContext: ThemeContextType = {\r\n  themeName: \"white\",\r\n  setTheme: (themeName: keyof Themes) => {\r\n    setCSSVariables(themeName);\r\n  }\r\n};\r\n\r\nexport const ThemeContext = createContext<ThemeContextType>(\r\n  defaultThemeContext\r\n);\r\n","import { createContext } from \"react\";\r\n\r\nexport type Language = {\r\n  title: string;\r\n  menuStart: string;\r\n  menuHistory: string;\r\n  menuSetting: string;\r\n  backButton: string;\r\n  changeLanguage: string;\r\n  notSupported: string;\r\n  resultTitle: string;\r\n  numberOfTotalQuestions: string;\r\n  numberOfCorrectAnswers: string;\r\n  numberOfIncorrectAnswers: string;\r\n  perfectScoreTitle: string;\r\n  goodSCoreTitle: string;\r\n  badScoreTitle: string;\r\n  redirectToMain: string;\r\n};\r\n\r\nexport type Languages = {\r\n  ko: Language;\r\n  en: Language;\r\n};\r\n\r\nexport type LanguageContextType = {\r\n  lang: keyof Languages;\r\n  setLang: (lang: keyof Languages) => void;\r\n};\r\n\r\nexport const languages: Languages = {\r\n  ko: {\r\n    title: \"당신... 개발자입니까?\",\r\n    menuStart: \"시작\",\r\n    menuHistory: \"플레이 내역\",\r\n    menuSetting: \"설정\",\r\n    backButton: \"뒤로가기\",\r\n    changeLanguage: \"언어 변경\",\r\n    notSupported: \"아직 지원하지 않습니다.\",\r\n    resultTitle: \"문제 결과\",\r\n    numberOfTotalQuestions: \"총 문제 횟수\",\r\n    numberOfCorrectAnswers: \"맞은 문제 횟수\",\r\n    numberOfIncorrectAnswers: \"틀린 문제 횟수\",\r\n    perfectScoreTitle: \"안녕하세요! 개발자님!\",\r\n    goodSCoreTitle: \"ㅋㅋㅋㅋㅋㅋㅋㅋ개발자는 아니고 뉘신지\",\r\n    badScoreTitle: \"ㅋㅋㅋㅋ 문과는 가라\",\r\n    redirectToMain: \"시작화면으로\"\r\n  },\r\n  en: {\r\n    title: \"Are you a developer?\",\r\n    menuStart: \"START\",\r\n    menuHistory: \"HISTORY\",\r\n    menuSetting: \"SETTING\",\r\n    backButton: \"BACK\",\r\n    changeLanguage: \"Change Language\",\r\n    notSupported: \"Not supported yet.\",\r\n    resultTitle: \"Result\",\r\n    numberOfTotalQuestions: \"Number of questions\",\r\n    numberOfCorrectAnswers: \"Number of correct answers\",\r\n    numberOfIncorrectAnswers: \"Nubmer of incorrect answers\",\r\n    perfectScoreTitle: \"Hi! Developer!\",\r\n    goodSCoreTitle: \"?? Why did you take this test? get out of here.\",\r\n    badScoreTitle: \"Go away. Don't take this test anymore.\",\r\n    redirectToMain: \"To Main\"\r\n  }\r\n};\r\n\r\nexport const defaultLanguageContext: LanguageContextType = {\r\n  lang: \"ko\",\r\n  setLang: (lang: keyof Languages) => {}\r\n};\r\n\r\nexport const LanguageContext = createContext<LanguageContextType>(\r\n  defaultLanguageContext\r\n);\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Languages,\r\n  LanguageContext,\r\n  LanguageContextType,\r\n  defaultLanguageContext\r\n} from \"../LanguageContext\";\r\n\r\ninterface Props {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst LanguageProvider = ({ children }: Props) => {\r\n  const [langCtx, setLangCtx] = useState<LanguageContextType>(\r\n    defaultLanguageContext\r\n  );\r\n\r\n  // TODO: It has to be changed...\r\n  const value = {\r\n    ...langCtx,\r\n    setLang: (lang: keyof Languages) => {\r\n      setLangCtx({\r\n        ...langCtx,\r\n        lang\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <LanguageContext.Provider value={value}>\r\n      {children}\r\n    </LanguageContext.Provider>\r\n  );\r\n};\r\n\r\nexport default LanguageProvider;\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./styles.scss\";\r\nimport { ThemeContext } from \"../../contexts/ThemeContext\";\r\nimport { LanguageContext, languages } from \"../../contexts/LanguageContext\";\r\n\r\nconst Main = (): React.ReactElement => {\r\n  const themeContext = useContext(ThemeContext);\r\n  const { lang } = useContext(LanguageContext);\r\n  const {\r\n    title,\r\n    menuStart,\r\n    menuHistory,\r\n    menuSetting,\r\n    notSupported\r\n  } = languages[lang];\r\n\r\n  useEffect(() => {\r\n    themeContext.setTheme(themeContext.themeName);\r\n  }, [themeContext]);\r\n\r\n  return (\r\n    <div className=\"main-container\">\r\n      <div className=\"title-box\">\r\n        <h1 className=\"title rh1 animated infinite bounce\">{title}</h1>\r\n      </div>\r\n      <div className=\"menu\">\r\n        <div className=\"menu-start\">\r\n          <Link to=\"/game\" className=\"dft-btn rh2\">\r\n            {menuStart}\r\n          </Link>\r\n        </div>\r\n        <div className=\"menu-history\" onClick={() => alert(notSupported)}>\r\n          <Link to=\".\" className=\"dft-btn rh2\">\r\n            {menuHistory}\r\n          </Link>\r\n        </div>\r\n        <div className=\"menu-setting\">\r\n          <Link to=\"/setting\" className=\"dft-btn rh2\">\r\n            {menuSetting}\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import React, { useEffect, useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./styles.scss\";\r\nimport { ThemeContext } from \"../../contexts/ThemeContext\";\r\nimport { languages, LanguageContext } from \"../../contexts/LanguageContext\";\r\n\r\nconst Setting: React.FC = () => {\r\n  const { lang, setLang } = useContext(LanguageContext);\r\n  const themeContext = useContext(ThemeContext);\r\n  const { backButton, changeLanguage } = languages[lang];\r\n\r\n  useEffect(() => {\r\n    themeContext.setTheme(themeContext.themeName);\r\n  }, [themeContext]);\r\n\r\n  const handleSwitchLanguage = () => {\r\n    console.log(\"hi\");\r\n    setLang(lang === \"ko\" ? \"en\" : \"ko\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"setting-container\">\r\n      <div className=\"setting-item-list\">\r\n        <div className=\"setting-item rh2\">\r\n          <label className=\"switch-language-btn\" onClick={handleSwitchLanguage}>\r\n            {changeLanguage}\r\n          </label>\r\n        </div>\r\n      </div>\r\n      <div className=\"back\">\r\n        <Link to=\"/\" className=\"dft-btn rh2\">\r\n          {backButton}\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Setting;\r\n","import { createContext } from \"react\";\r\n\r\nexport type Question = {\r\n  question: string;\r\n  answerList: Array<string>;\r\n  answerIdx: number;\r\n};\r\n\r\nexport type Questions = {\r\n  ko: Question[];\r\n  en: Question[];\r\n};\r\n\r\nexport type QuestionsContextType = {\r\n  currentQuestionIdx: number;\r\n  changeIdxRandomly: Function;\r\n};\r\n\r\nexport const questions: Questions = {\r\n  ko: [\r\n    {\r\n      question: \"다음 중 FIFO 자료구조로 옳은 것은?\",\r\n      answerList: [\"스택\", \"큐\", \"트리\", \"해쉬\"],\r\n      answerIdx: 1\r\n    },\r\n    {\r\n      question: \"다음 중 비관계형 데이터베이스는?\",\r\n      answerList: [\"Mysql\", \"MariaDB\", \"MongoDB\", \"Mssql\"],\r\n      answerIdx: 2\r\n    },\r\n    {\r\n      question: \"다음 중 일반적으로 가장 빠른 정렬 알고리즘은?\",\r\n      answerList: [\"버블정렬\", \"퀵정렬\", \"셀정렬\", \"선택정렬\"],\r\n      answerIdx: 1\r\n    },\r\n    {\r\n      question: \"실행중인 프로그램을 말하는 용어는?\",\r\n      answerList: [\"프로세스\", \"운영체제\", \"페이징\", \"쉘\"],\r\n      answerIdx: 0\r\n    },\r\n    {\r\n      question:\r\n        \"동일한 자원을 동시에 접근하는 작업을 실행하는 코드 영역을 말한다.\",\r\n      answerList: [\"임계영역\", \"힙영역\", \"스택영역\", \"데이터영역\"],\r\n      answerIdx: 0\r\n    },\r\n    {\r\n      question:\r\n        \"세마포가 Ready Queue 를 가지고 있고, 둘 이상의 프로세스가 Critical Section 진입을 무한정 기다리고 있고, Critical Section 에서 실행되는 프로세스는 진입 대기 중인 프로세스가 실행되야만 빠져나올 수 있는 상황을 지칭한다.\",\r\n      answerList: [\"교착상태\", \"진입불가상태\", \"대기상태\", \"점유상태\"],\r\n      answerIdx: 0\r\n    }\r\n  ],\r\n  en: [\r\n    {\r\n      question: \"Which one is the FIFO structure?\",\r\n      answerList: [\"Stack\", \"Queue\", \"Tree\", \"Hash\"],\r\n      answerIdx: 1\r\n    },\r\n    {\r\n      question: \"Which one is Non-SQL Database?\",\r\n      answerList: [\"Mysql\", \"MariaDB\", \"MongoDB\", \"Mssql\"],\r\n      answerIdx: 2\r\n    },\r\n    {\r\n      question: \"Which one is fastest sort algorithm in general?\",\r\n      answerList: [\"Bubble Sort\", \"Quick Sort\", \"Shell Sort\", \"Selection Sort\"],\r\n      answerIdx: 2\r\n    },\r\n    {\r\n      question:\r\n        \"[] is the instance of a computer program that is being executed by one or many threads.\",\r\n      answerList: [\"Process\", \"Operation System\", \"Paging\", \"Shell\"],\r\n      answerIdx: 0\r\n    },\r\n    {\r\n      question:\r\n        \"In concurrent programming, concurrent accesses to shared resources can lead to unexpected or erroneous behavior, so parts of the program where the shared resource is accessed need to be protected in ways that avoid the concurrent access. This protected section is the []\",\r\n      answerList: [\r\n        \"Critical Section\",\r\n        \"Heap Section\",\r\n        \"Stack Section\",\r\n        \"Data Section\"\r\n      ],\r\n      answerIdx: 0\r\n    },\r\n    {\r\n      question:\r\n        \"In concurrent computing, [] is a state in which each member of a group is waiting for another member, including itself, to take action, such as sending a message or more commonly releasing a lock.\",\r\n      answerList: [\"Dead Lock\", \"Wait State\", \"Occupancy State\", \"Access Lock\"],\r\n      answerIdx: 0\r\n    }\r\n  ]\r\n};\r\n\r\nexport const defaultQuestionsContext: QuestionsContextType = {\r\n  currentQuestionIdx: 0,\r\n  changeIdxRandomly: () => {}\r\n};\r\n\r\nexport const QuestionsContext = createContext<QuestionsContextType>(\r\n  defaultQuestionsContext\r\n);\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport {\r\n  QuestionsContext,\r\n  Question,\r\n  questions\r\n} from \"../../contexts/QuestionsContext\";\r\nimport { LanguageContext } from \"../../contexts/LanguageContext\";\r\nimport \"./styles.scss\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\n/**\r\n * Returns shuffled questions\r\n */\r\nconst generateRandNumList = (srtN: number, endN: number): number[] => {\r\n  const numSequence: number[] = Array.from(\r\n    new Array(endN - srtN + 1),\r\n    (_, i) => i + srtN\r\n  );\r\n  const randNumList: number[] = [];\r\n\r\n  while (numSequence.length > 0) {\r\n    const rIdx = Math.floor(Math.random() * numSequence.length);\r\n    randNumList.push(numSequence.splice(rIdx, 1)[0]);\r\n  }\r\n\r\n  return randNumList;\r\n};\r\n\r\nconst Game = () => {\r\n  const { changeIdxRandomly, currentQuestionIdx } = useContext(\r\n    QuestionsContext\r\n  );\r\n  const { lang } = useContext(LanguageContext);\r\n  const [progressWidthPercentage, setProgressWidthPercentage] = useState<\r\n    number\r\n  >(100);\r\n  const [isGameEnd, gameEnd] = useState<boolean>(false);\r\n  const [correctAnswerNum, setCorrectAnswerNum] = useState<number>(0);\r\n  const [totalQuestionNum, setTotalQuestionNum] = useState<number>(0);\r\n  const [questionObj, setQuestionObj] = useState<Question | null>(null);\r\n  const [randNumList, setRandNumList] = useState<number[]>([0, 1, 2, 3]);\r\n\r\n  const checkAnswer = awNum => {\r\n    setTotalQuestionNum(totalQuestionNum + 1);\r\n\r\n    if (awNum === questions[lang][currentQuestionIdx].answerIdx) {\r\n      setCorrectAnswerNum(correctAnswerNum + 1);\r\n    }\r\n\r\n    changeIdxRandomly(lang);\r\n  };\r\n\r\n  // Initalize Effect\r\n  useEffect(() => {\r\n    changeIdxRandomly(lang);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  // change a question when question idx changed\r\n  useEffect(() => {\r\n    setRandNumList(generateRandNumList(0, 3));\r\n    setQuestionObj(questions[lang][currentQuestionIdx]);\r\n  }, [currentQuestionIdx, lang]);\r\n\r\n  // change progress and process to finish the game\r\n  useEffect(() => {\r\n    if (progressWidthPercentage > 0) {\r\n      setTimeout(() => {\r\n        setProgressWidthPercentage(progressWidthPercentage - 0.1);\r\n      }, 10);\r\n    } else {\r\n      gameEnd(true);\r\n    }\r\n  }, [progressWidthPercentage]);\r\n\r\n  if (isGameEnd) {\r\n    return (\r\n      <Redirect\r\n        to={`game-result?total=${totalQuestionNum}&cn=${correctAnswerNum}`}\r\n      />\r\n    );\r\n  }\r\n\r\n  if (questionObj === null) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <div className=\"time-container\">\r\n        <div className=\"time-icon-box\">\r\n          <img\r\n            src={`${process.env.PUBLIC_URL}/images/game/game-clock.png`}\r\n            alt=\"Clock Icon\"\r\n            className=\"clock-icon animated infinite swing delay-1s\"\r\n          />\r\n        </div>\r\n        <div className=\"progress-box\">\r\n          <div\r\n            className=\"progress-bar\"\r\n            style={{ width: `${progressWidthPercentage}%` }}\r\n          ></div>\r\n        </div>\r\n      </div>\r\n      <div className=\"question-box\">\r\n        <pre>{questionObj.question}</pre>\r\n      </div>\r\n      <div className=\"answers-box\">\r\n        {randNumList.map((rIdx, i) => (\r\n          <div key={i} className=\"answer\" onClick={() => checkAnswer(rIdx)}>\r\n            {questionObj.answerList[rIdx]}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport \"./styles.scss\";\r\nimport { useLocation, Redirect, Link } from \"react-router-dom\";\r\nimport { ThemeContext } from \"../../contexts/ThemeContext\";\r\nimport { LanguageContext, languages } from \"../../contexts/LanguageContext\";\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nconst GameResult = () => {\r\n  const [query] = useState(useQuery());\r\n  const [totalNum, setTotalNum] = useState<number>(0);\r\n  const [correctNum, setCorrectNum] = useState<number>(0);\r\n  const [resultText, setResultText] = useState<string>(\"\");\r\n  const [loading, load] = useState<boolean>(true);\r\n  const [hasError, error] = useState<boolean>(false);\r\n\r\n  const themeContext = useContext(ThemeContext);\r\n  const { lang } = useContext(LanguageContext);\r\n  const {\r\n    resultTitle,\r\n    numberOfTotalQuestions,\r\n    numberOfCorrectAnswers,\r\n    numberOfIncorrectAnswers,\r\n    perfectScoreTitle,\r\n    goodSCoreTitle,\r\n    badScoreTitle,\r\n    redirectToMain\r\n  } = languages[lang];\r\n\r\n  useEffect(() => {\r\n    themeContext.setTheme(themeContext.themeName);\r\n  }, [themeContext]);\r\n\r\n  useEffect(() => {\r\n    const total: number = Number(query.get(\"total\"));\r\n    const cn: number = Number(query.get(\"cn\"));\r\n\r\n    if (total >= 10 && total === cn) {\r\n      setResultText(perfectScoreTitle);\r\n    } else if (total === cn) {\r\n      setResultText(goodSCoreTitle);\r\n    } else {\r\n      setResultText(badScoreTitle);\r\n    }\r\n\r\n    if (isNaN(total) || Number.isNaN(cn)) {\r\n      error(true);\r\n    } else {\r\n      setTotalNum(total);\r\n      setCorrectNum(cn);\r\n\r\n      load(false);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  if (hasError) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  if (loading) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-result-container\">\r\n      <div className=\"game-result-box\">\r\n        <h1>{resultTitle}</h1>\r\n        <h2>{resultText}</h2>\r\n        <h2>\r\n          {numberOfTotalQuestions}: {totalNum}\r\n        </h2>\r\n        <h2>\r\n          {numberOfCorrectAnswers}: {correctNum}\r\n        </h2>\r\n        <h2>\r\n          {numberOfIncorrectAnswers}: {totalNum - correctNum}\r\n        </h2>\r\n        <h1>\r\n          <Link to=\"/\">{redirectToMain}</Link>\r\n        </h1>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameResult;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n    QuestionsContext,\r\n    QuestionsContextType,\r\n    defaultQuestionsContext,\r\n    questions\r\n} from \"../QuestionsContext\";\r\n\r\ninterface Props {\r\n    children: React.ReactNode;\r\n}\r\n\r\nconst QuestionsProvider = ({ children }: Props) => {\r\n    const [questionsCtx, setQuestionsCtx] = useState<QuestionsContextType>(\r\n        defaultQuestionsContext\r\n    );\r\n\r\n    // TODO: It has to be changed...\r\n    const value = {\r\n        ...questionsCtx,\r\n        changeIdxRandomly: (lang: string) => {\r\n            setQuestionsCtx({\r\n                ...questionsCtx,\r\n                currentQuestionIdx: Math.floor(\r\n                    Math.random() * questions[lang].length\r\n                )\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <QuestionsContext.Provider value={value}>\r\n            {children}\r\n        </QuestionsContext.Provider>\r\n    );\r\n};\r\n\r\nexport default QuestionsProvider;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"./styles.scss\";\r\nimport \"animate.css\";\r\nimport { ThemeContext, defaultThemeContext } from \"../../contexts/ThemeContext\";\r\nimport LanguageProvider from \"../../contexts/providers/LanguageProvider\";\r\nimport Main from \"../Main\";\r\nimport Setting from \"../Setting\";\r\nimport Game from \"../Game\";\r\nimport GameResult from \"../GameResult\";\r\nimport QuestionsProvider from \"../../contexts/providers/QuestionsProvider\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <LanguageProvider>\r\n            <QuestionsProvider>\r\n                <ThemeContext.Provider value={defaultThemeContext}>\r\n                    <Router>\r\n                        <Switch>\r\n                            <Route path=\"/game\" exact>\r\n                                <Game />\r\n                            </Route>\r\n                            <Route path=\"/game-result\" exact>\r\n                                <GameResult />\r\n                            </Route>\r\n                            <Route path=\"/setting\" exact>\r\n                                <Setting />\r\n                            </Route>\r\n                            <Route path=\"/\">\r\n                                <Main />\r\n                            </Route>\r\n                        </Switch>\r\n                    </Router>\r\n                </ThemeContext.Provider>\r\n            </QuestionsProvider>\r\n        </LanguageProvider>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}